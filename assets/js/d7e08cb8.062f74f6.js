"use strict";(self.webpackChunkcashew_da_docs=self.webpackChunkcashew_da_docs||[]).push([[366],{5501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var s=n(5893),i=n(1151);const a={},l=void 0,o={id:"Dataset/DatasetSplit",title:"DatasetSplit",description:"Brief description of the submodule",source:"@site/docs/Dataset/DatasetSplit.md",sourceDirName:"Dataset",slug:"/Dataset/DatasetSplit",permalink:"/CashewDA-docs/docs/Dataset/DatasetSplit",draft:!1,unlisted:!1,editUrl:"https://github.com/${organizationName}/${projectName}/tree/main/docs/Dataset/DatasetSplit.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DataGathering",permalink:"/CashewDA-docs/docs/Dataset/DataGathering"},next:{title:"ReadyToTrain_DS",permalink:"/CashewDA-docs/docs/Dataset/ReadyToTrain_DS"}},r={},d=[{value:"Brief description of the submodule",id:"brief-description-of-the-submodule",level:2},{value:"split_data()",id:"split_data",level:2},{value:"Params",id:"params",level:3},{value:"Outputs",id:"outputs",level:3},{value:"Dependencies used",id:"dependencies-used",level:3},{value:"Source code",id:"source-code",level:3},{value:"plot_splits()",id:"plot_splits",level:2},{value:"Params",id:"params-1",level:3},{value:"Outputs",id:"outputs-1",level:3},{value:"Dependencies used",id:"dependencies-used-1",level:3},{value:"Source code",id:"source-code-1",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"brief-description-of-the-submodule",children:"Brief description of the submodule"}),"\n",(0,s.jsx)(t.p,{children:"This submodule contains the function used to split the datasets into train, test and validation splits and visualize them."}),"\n",(0,s.jsx)(t.h2,{id:"split_data",children:"split_data()"}),"\n",(0,s.jsx)(t.p,{children:"Function to split both datasets into train, validation and test spatially. The function uses K-Means clustering with x, y coordinates to split the data in groups of polygons roughly as (60% Training, 20% Validation and 20% Test.)"}),"\n",(0,s.jsx)(t.h3,{id:"params",children:"Params"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"gdf:"})," (geopandas.GeoDataFrame) Dataframe with the complete dataset."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"seed:"})," (int) Seed to ensure replicabilty of kmeans clustering."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"cluster:"})," (int) Number of clusters to get from K-means algorithm"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"splits:"})," (list) List with values of approximate percentage wanted to get per split. Order goes [train, validation, test]."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"outputs",children:"Outputs"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"gdf:"})," (geopandas.GeoDataFrame) GeoDataFrame with an additional feature ('split') with the split to which the polygon belongs (Train, Validation or Test)."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"dependencies-used",children:"Dependencies used"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from sklearn.cluster import KMeans\nimport pandas as pd\n"})}),"\n",(0,s.jsx)(t.h3,{id:"source-code",children:"Source code"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def split_data(gdf, seed, clusters = 10, splits = [50,25,25]):\n    \"\"\"\n        Function to split both datasets into train, validation and test spatially. The function uses K-Means clustering with x, y coordinates to split the data in groups of polygons roughly as (60% Training, 20% Validation and 20% Test.)\n\n        Input:\n            - gdf: GeoDataFrame with the complete dataset.\n            - seed: (int) Seed to ensure replicabilty of kmeans clustering.\n            - cluster: (int) Number of clusters to get from K-means algorithm\n            - splits: (list) List with values of approximate percentage wanted to get per split. Order goes \\[train, validation, test\\]. Expected values between 0 and 100.\n\n        Output:\n            - gdf: GeoDataFrame with an additional feature ('split') with the split to which the polygon belongs (Train, Validation or Test).\n    \"\"\"\n    gdf.geometry = gdf.make_valid()\n\n    # Get centroids \n    centroids = pd.DataFrame([gdf.centroid.x, gdf.centroid.y]).T\n\n    # Get the clusters with K-Means.\n    kmeans = KMeans(clusters, random_state = seed)\n        \n    labels = kmeans.fit_predict(centroids)\n    \n    clusters = np.max(labels) + 1\n    \n    gdf['split'] = 'train' \n    gdf['split'][labels > clusters//(100/splits[0])] = 'validation' \n    gdf['split'][labels > clusters//(100/(splits[0] + splits[1]))] = 'test' \n\n    return gdf\n"})}),"\n",(0,s.jsx)(t.h2,{id:"plot_splits",children:"plot_splits()"}),"\n",(0,s.jsx)(t.p,{children:"Function to plot the train, validation and test splits previously created using k-means clustering."}),"\n",(0,s.jsx)(t.h3,{id:"params-1",children:"Params"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"gdf:"})," (geopandas.GeoDataFrame) DataFrame with the data splitted in train, validation and test."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"filename:"})," (str) Name of the output file where the plot will be saved."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"title:"})," (str) Title to be shown in the figure."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"kde:"})," (boolean) Boolean to determine if kernel density of the polygons will be plotted or not."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"outputs-1",children:"Outputs"}),"\n",(0,s.jsx)(t.h3,{id:"dependencies-used-1",children:"Dependencies used"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import matplotlib.pyplot as plt\nfrom matplotlib.patches import Patch\nimport contextily as cnx\nimport seaborn as sns\n"})}),"\n",(0,s.jsx)(t.h3,{id:"source-code-1",children:"Source code"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def plot_splits(gdf, filename = '', title = 'Title', kde = False):\n    \"\"\"\n        Function to plot the splits created using k-means clustering.\n\n        Inputs:\n            - gdf: (geopandas.GeoDataFrame) DataFrame with the data splitted in train, validation and test.\n            - filename: (str) Name of the output file where the plot will be saved.\n            - title: (str) Title to be shown in the figure.\n            - kde: (boolean) Boolean to determine if kernel density of the polygons will be plotted or not.\n\n        Outputs:\n    \"\"\"\n    \n    fig, ax = plt.subplots(1,1, figsize = (15,15))\n\n    col = {'train' : 'red', 'validation' : 'blue', 'test' : 'green'}\n    \n    gdf.plot(color = [col[i] for i in gdf['split']],\n             legend = True, \n             ax = ax)\n    \n    legend_elements = [Patch(facecolor='red', label='Color Patch'),\n                       Patch(facecolor='blue', label='Color Patch'),\n                       Patch(facecolor='green', label='Color Patch')]\n\n    if kde:\n        sns.kdeplot(x = gdf.centroid.x, y = gdf.centroid.y,\n            hue = gdf.split, thresh = 0.05, \n            fill = True, levels = 40, \n            palette = ['red', 'blue', 'green'])\n    \n    ax.legend(legend_elements, \n              ['train', 'validation', 'test'], \n              fontsize = 12,\n              title  = 'split',\n              loc = 'upper right')\n    \n    cnx.add_basemap(ax = ax, \n                    crs = gdf.crs, \n                    source = cnx.providers.Esri.WorldStreetMap)\n\n    ax.set_title(title)\n    \n    if len(filename) != 0:\n        fig.savefig(filename)\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>l});var s=n(7294);const i={},a=s.createContext(i);function l(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);